##################################################
##########     MACROS CONFIGURATION     ##########
##################################################

######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 190
variable_hotendtemp: 60
variable_chambertemp: 20
gcode: 
    PRINT_START_LED
    POWER_ON_CPAP

  # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}  

	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  													   ; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                                         ; cancel off timer (if there is one)
    RESETSPEEDS	                                                                                           ; reset speed
    SET_GCODE_OFFSET Z=0
    M104 S140																							   ; set hotend to no-ooze temp
	M140 S{bedtemp}	
    CG28
    G90

    {% if printer["temperature_sensor chamber"].temperature < chambertemp %}							   ; - if chamber is not at temp yet:
		HEATSOAK T={bedtemp} MOVE=1																		   ; 	heatsoak macro + park in center
		M190 S{bedtemp} 																				   ; 	wait for bed final temp
		TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}					       ; 	wait for chamber final temp
	{% else %}																							   ; - if chamber is already at temp:
		{% if printer.heater_bed.temperature < (bedtemp-2) %}											   ; -- but bed is not fully heated (within 2C):
			HEATSOAK T={bedtemp} MOVE=1																	   ; 		heatsoak and park
			M190 S{bedtemp} 																			   ; 		wait for bed final temp
		{% else %}																						   ; -- and bed is already heated:
			HEATSOAK T={bedtemp} MOVE=0																	   ; 		"heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
	{% endif %}

    M106 S0																								   ; turn off part cooling fan (from heatsoak)
    BED_MESH_CLEAR																						   ; clear bed mesh
	#G28 Z																								   ; home z
    #BED_MESH_CALIBRATE                                                                                     ; mesh
    #G28 Z																								   ; home z again
	G0 Y190 Z10 X{printer.toolhead.axis_maximum.x} F19500                                                  ; move to right of nozzle brush                            
    CLEANNOZZLE                                                                                            ; clean nozzle while hot
    G28 Z
    CALIBRATE_Z                                                                                            ; calibrate z offset with hot nozzle
    M109 S{hotendtemp}                                                                                     ; set & wait for hotend temp
    SWIPENOZZLE                                                                                            ; swipe nozzle brush on way to print purge line
    G92 E0                                                                                                 ; Reset extruder
    #G1 Z5.0 F3000                                                                                          ; Moove Z up
    #G1 X7.1 Y40 Z0.3 F19500                                                                                ; Moove to initial point
    #G1 X7.1 Y210.0 Z0.3 F1500 E15                                                                          ; First line
    #G1 X7.4 Y210.0 Z0.3 F5000                                                                              ; Side moove
    #G1 X7.4 Y45 Z0.3 F1500 E30                                                                             ; Second line
    PRIME_BLOB
    G92 E0                                                                                                 ; Reset extruder
    M83                                                                                                    ; Set E to Relative Positioning
	G1 Z2.0 F3000                                                                                          ; Moove Z up
    SKEW_PROFILE LOAD=my_skew_profile                                                                      ; load skew profile
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                    ; enable filament sensor

[gcode_macro PRINT_END]
gcode:
    PRINT_END_LED
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0	
    CLEAR_PAUSE																							   ; clear pause (from M191) if there is one
	{% if printer.heater_bed.temperature >= 90 %}												
		POWER_ON_EXHAUSTFAN  	
    {% endif %}													
	M400    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    G92 E0
    M104 S0                                                                                               ; turn-off hotend
    M140 S0                                                                                               ; turn-off bed
    M107
    SET_FAN_SPEED FAN=RSCS SPEED=0.0
    SET_FAN_SPEED FAN=BedFans SPEED=0
    POWER_OFF_CPAP
    G91                                                                                                   ; Prelative positioning
    G1 Z5 F3000 E-15                                                                                      ; moove Z up
    G90                                                                                                   ; use absolute coordinates
    G0 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F19500.0  		      ; park nozzle at rear
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120												      ; turn exhaust off in 2 min
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800	 												  ; turn everything off in 30 min
	RESETSPEEDS	
    M84                                                                                                  ; disable motors
    POWER_OFF_XYMOTORS                                                                                   ; turn-off 48V PSU
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[delayed_gcode EXHAUST_OFF]
gcode:
	POWER_OFF_EXHAUSTFAN 

[delayed_gcode DELAYED_OFF]
gcode:
	OFF 

[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 



######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=7200															    						; set timeout to 2 hours
	{% endif %}
	RESPOND PREFIX=tgalarm MSG="Paused "

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1	; enable filament sensor
		STOP_LED_EFFECTS
        PRINT_START_LED																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}

# Filament runout / change alias	
[gcode_macro M600]
description: Filament change
gcode:
    STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=critical_error
	PAUSE



######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                                         ; cancel off timer (if there is one)
	POWER_OFF_EXHAUSTFAN            		 		                                                       ; turn off exhaust fan
	#SET_PIN PIN=caselight VALUE=1					                                                       ; turn on case light
	M140 S{t}									                                                           ; heat bed
	{% if t >= 100 %} 
		M104 S180									                                                       ; set hotend to no-ooze temp
		M106 S64 									                                                       ; turn on part fan (25%)
	{% else %}
		M106 S0 									                                                       ; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										                                                       ; conditional home
		PARKCENTER						 			                                                       ; move to bed
	{% endif %}

[gcode_macro PID_EXTRUDER]
gcode:
  M106 S128
  PID_CALIBRATE HEATER=extruder TARGET=245

###

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=70

###

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}


[gcode_macro CLEANNOZZLE]
gcode:
    # Parameters
    # Iterations
    {% set i = params.I|default(5)|int %}
    # Speed
    {% set s = params.S|default(100)|int %}
    
    CG28
    SAVE_GCODE_STATE NAME=CLEANNOZZLE
    G90                                                   ; absolute positioning
    G0 Y190 Z10 X{printer.toolhead.axis_maximum.x} F19500 ; move to right of nozzle brush
    G0 Z0.5 F19500                                          ; move down to nozzle brush
    {% for iteration in range(i|int) %}
        G0 Y240 F{s*60}                                   ; wipe back
        G0 Y190 F{s*60}                                   ; wipe forth
    {% endfor %}
    G0 Y190 F{s*60}                                       ; wipe back
    G0 Z10 F19500                                         ; raise
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE
    
[gcode_macro SWIPENOZZLE]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=SWIPENOZZLE
    G90                                                   ; absolute positioning
    G0 Y190 Z10 X{printer.toolhead.axis_maximum.x} F19500 ; move to right of nozzle brush
    G0 Z0.5 F19500                                        ; lower
    G0 Y240 F2400                                         ; wipe back
    G0 Z10  F19500                                        ; raise
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE


[gcode_macro PRIME_BLOB]
description: Prints a primeblob
gcode:
    SAVE_GCODE_STATE NAME=prime_blob_state
    M117 Priming nozzle with prime blob..
    RESPOND MSG="Priming nozzle with prime blob.."
    #{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    G90                                                                                                        ; absolute posiotioning
    M83                                                                                                        ; relative extrusion                                                     
    G1 Z5 F3000                                                                                                ; lift 5mm
    G1 X{printer.toolhead.axis_minimum.x + 20} Y{printer.toolhead.axis_minimum.y + 15} Z0.5 F19500             ; move to blob position
    G1 F60 E30                                                                                                 ; extrude a blob
    M106 S102                                                                                                  ; 40% fan
    G1 Z5 F100 E5                                                                                              ; move the extruder up by 5mm while extruding, breaks away from blob
    G1 F200 Y{printer.toolhead.axis_minimum.y + 25} E1                                                         ; move to wipe position, but keep extruding so the wipe is attached to blob
    G1 F200 Y{printer.toolhead.axis_minimum.y + 30} Z3.8 E0.5
    G1 F200 Y{printer.toolhead.axis_minimum.y + 35} Z2.6 E0.5
    G1 F200 Y{printer.toolhead.axis_minimum.y + 40} Z1.4 E0.5
    G1 F200 Y{printer.toolhead.axis_minimum.y + 45} Z0.2 E0.5
    M106 S0                                                                                                    ; 0% fan
    G1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.2 E0.6                                                   ; small wipe line
    G1 F19500 Y{printer.toolhead.axis_minimum.y + 100}                                                       ; break away wipe
    RESTORE_GCODE_STATE NAME=prime_blob_state


################### SENSORLESS HOMING ##################

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.900 %}
    {% set driver_config = printer.configfile.settings['tmc5160 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G0 X310 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.900 %}
    {% set driver_config = printer.configfile.settings['tmc5160 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y310 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}



######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}



######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED



######################### TESTING #########################

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}



######################### ALIASES/SHORTCUTS #########################

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}



##################################################################################
##################################################################################